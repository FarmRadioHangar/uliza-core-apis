
==================== FINAL INTERFACE ====================
2017-08-02 07:12:20.38249 UTC

interface wreq-0.5.0.1@wreq-0.5.0.1-LabPVfSpM6c4hnlpFpxHHI:Network.Wreq.Internal.Lens 8002
  interface hash: 557cc09afc58c02a70b310e7c8b32ce2
  ABI hash: 8b2f743ebedbc5952191dda5f511e846
  export-list hash: 76822200ab3f926b4f6b5cac27386d9a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a2bd07ed4c4098668071d1422ab75ae3
  sig of: Nothing
  used TH splices: True
  where
exports:
  Network.Wreq.Internal.Lens.assoc
  Network.Wreq.Internal.Lens.assoc2
  Network.Wreq.Internal.Lens.checkResponse
  Network.Wreq.Internal.Lens.cookieJar
  Network.Wreq.Internal.Lens.decompress
  Network.Wreq.Internal.Lens.deleteKey
  Network.Wreq.Internal.Lens.host
  Network.Wreq.Internal.Lens.hostAddress
  Network.Wreq.Internal.Lens.maybeSetHeader
  Network.Wreq.Internal.Lens.method
  Network.Wreq.Internal.Lens.onRequestBodyException
  Network.Wreq.Internal.Lens.path
  Network.Wreq.Internal.Lens.port
  Network.Wreq.Internal.Lens.proxy
  Network.Wreq.Internal.Lens.queryString
  Network.Wreq.Internal.Lens.rawBody
  Network.Wreq.Internal.Lens.redirectCount
  Network.Wreq.Internal.Lens.requestBody
  Network.Wreq.Internal.Lens.requestHeaders
  Network.Wreq.Internal.Lens.requestVersion
  Network.Wreq.Internal.Lens.responseTimeout
  Network.Wreq.Internal.Lens.secure
  Network.Wreq.Internal.Lens.seshCookies
  Network.Wreq.Internal.Lens.seshManager
  Network.Wreq.Internal.Lens.seshRun
  Network.Wreq.Internal.Lens.setHeader
  Network.HTTP.Client.Types.Request
module dependencies: Network.Wreq.Internal.Types
                     Network.Wreq.Lens.Machinery
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-6nMo9ca9E95L1lsN6Br4XL
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      base64-bytestring-1.0.0.1@base64-bytestring-1.0.0.1-4O9TExPPz6eI82Yj7L4SIj
                      bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q
                      binary-0.8.3.0@binary-0.8.3.0
                      blaze-builder-0.4.0.2@blaze-builder-0.4.0.2-LxClHUTiKUUAxWtvJ5Oeoy
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      case-insensitive-1.2.0.10@case-insensitive-1.2.0.10-1D5OUKQ7UrJ7IpOe0di4Un
                      comonad-5.0.1@comonad-5.0.1-2dOTQljdUSmGwatNHkYwW3
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      cookie-0.4.2.1@cookie-0.4.2.1-ImqC1hbvUERAwQQgqhuUAD
                      data-default-class-0.1.2.0@data-default-class-0.1.2.0-GsXqKN6o1X9jr0fF5qCVD
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      distributive-0.5.2@distributive-0.5.2-KlkgfUmuqy3Z181VSjKfJ
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      free-4.12.4@free-4.12.4-JUYfwQOGje1F6ljlwhsQfP
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      http-client-0.5.7.0@http-client-0.5.7.0-ZH40bByQedKxMmMnUi42q
                      http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.2@kan-extensions-5.0.2-5SVDrYVManyKLFvHkx6yaS
                      lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz
                      network-uri-2.6.1.0@network-uri-2.6.1.0-7BN1tbB3iHQ2XgvmqLAYph
                      parsec-3.1.11@parsec-3.1.11-1aqiimsgq2dCv7eoaC8WuX
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2@profunctors-5.2-7ONvCmXw8M9Co9mYrudYx
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      semigroupoids-5.2@semigroupoids-5.2-8RI6HtO1LKLE496qmzB9Po
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      streaming-commons-0.1.17@streaming-commons-0.1.17-6xuIA5RXrs65yyeq3HWIWP
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.3.0@th-abstraction-0.2.3.0-IC8R8TEnxiaENlxvcI4gyL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         http-client-0.5.7.0@http-client-0.5.7.0-ZH40bByQedKxMmMnUi42q:Network.HTTP.Client.Request
         network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-6nMo9ca9E95L1lsN6Br4XL:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-5j5AtkN8t5O1W8mEe1pi0q:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         http-client-0.5.7.0@http-client-0.5.7.0-ZH40bByQedKxMmMnUi42q:Network.HTTP.Client
                         kan-extensions-5.0.2@kan-extensions-5.0.2-5SVDrYVManyKLFvHkx6yaS:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-5SVDrYVManyKLFvHkx6yaS:Data.Functor.Yoneda
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.At
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Internal.Indexed
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Reified
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Tuple
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Wrapped
                         lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Zoom
                         network-uri-2.6.1.0@network-uri-2.6.1.0-7BN1tbB3iHQ2XgvmqLAYph:Network.URI
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2@profunctors-5.2-7ONvCmXw8M9Co9mYrudYx:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.3.0@th-abstraction-0.2.3.0-IC8R8TEnxiaENlxvcI4gyL:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2@zlib-0.6.1.2-7negTfm2ujt1gW4wr40MUp:Codec.Compression.Zlib.Stream
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Exception e38fa3e73d54022fb9e3ce06477dfd07
import  -/  base-4.9.1.0:GHC.IORef 306bd532f2f3b000347cbe6316adc20e
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString 43e99fdac51908da414a28958688da64
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Internal 89cda42ec946d9d6577dd41ab95d523e
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  http-client-0.5.7.0@http-client-0.5.7.0-ZH40bByQedKxMmMnUi42q:Network.HTTP.Client 061b3ff266298c4df34c97386e44eded
import  -/  http-client-0.5.7.0@http-client-0.5.7.0-ZH40bByQedKxMmMnUi42q:Network.HTTP.Client.Types 3a50d3b18de4f434ed7bb6cc70d2d727
import  -/  http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY:Network.HTTP.Types 1010d7b916d2dfae6a757564614cf65d
import  -/  http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY:Network.HTTP.Types.Header 9a165ff3162913a68c9de866b2bd192e
import  -/  http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY:Network.HTTP.Types.Method 884538998196415212deee808349710a
import  -/  http-types-0.9.1@http-types-0.9.1-G7E1zHPzooHCYxKqGuQmxY:Network.HTTP.Types.Version 791e687c2864935167bc061c99791376
import  -/  lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens cd1550f6c488679db5861f401243c95b
import  -/  lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Indexed 23cdc984fd010f31263af292ad854beb
import  -/  lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Setter 5fc5cbe426a271131fc78672bbbb12c9
import  -/  lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Tuple 4565e82e6e3590cc365d5ba6017dd7f7
import  -/  lens-4.15.3@lens-4.15.3-5Jg3WKTSlS050icgk0CLIX:Control.Lens.Type 91bf144cc6234fb5c3b3d44a50220bda
import  -/  network-2.6.3.2@network-2.6.3.2-IsLM4TXcLoRI0fmmBYVyQz:Network.Socket.Types e0e029ac5eaa30b6170e0170a0fb3341
import  -/  Network.Wreq.Internal.Types be2a7748ee40548c69ace57897e4b24b
  exports: a524fd43208fd80d0d6aeb6ff2dd8698
  Body c0c4e7c0a951e51f160cfcf7b3495525
  Run 7868b46275dc686f0089b90eb1de622d
  Session e358b84187b8148333a0760af0195805
  Session f368629ac35c1f55d336260c0e29886e
import  -/  Network.Wreq.Lens.Machinery fa6dd4f309b1d3c59813f8aa74be6f5e
  exports: 3ac741299fd856a6af846bd71b5e1d87
  makeLenses ad09609a53b91d4d83c826d41198789c
9ccd7c05fe4c39cabbc4456feeffe8e6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Network.Wreq.Internal.Lens.$trModule2
                   Network.Wreq.Internal.Lens.$trModule1) -}
25950fb4ba5ee86c013cd4810a913b25
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Network.Wreq.Internal.Lens"#) -}
ad2e4417f9d212518d10bea62ba16989
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "wreq-0.5.0.1-LabPVfSpM6c4hnlpFpxHHI"#) -}
0f568cd06e8ca53ab8a8233d52ab0416
  $wsetHeader ::
    Network.HTTP.Types.Header.HeaderName
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Method.Method
    -> GHC.Types.Bool
    -> Data.ByteString.Internal.ByteString
    -> GHC.Types.Int
    -> Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Types.Header.RequestHeaders
    -> Network.HTTP.Client.Types.RequestBody
    -> GHC.Base.Maybe Network.HTTP.Client.Types.Proxy
    -> GHC.Base.Maybe Network.Socket.Types.HostAddress
    -> GHC.Types.Bool
    -> (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
    -> GHC.Types.Int
    -> (Network.HTTP.Client.Types.Request
        -> Network.HTTP.Client.Types.Response
             Network.HTTP.Client.Types.BodyReader
        -> GHC.Types.IO ())
    -> Network.HTTP.Client.Types.ResponseTimeout
    -> GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar
    -> Network.HTTP.Types.Version.HttpVersion
    -> (GHC.Exception.SomeException -> GHC.Types.IO ())
    -> GHC.Base.Maybe Network.HTTP.Client.Types.Manager
    -> Network.HTTP.Client.Types.Request
  {- Arity: 21, HasNoCafRefs,
     Strictness: <L,U(U,U(U,U,U,U))><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Unfolding: (\ (w :: Network.HTTP.Types.Header.HeaderName)
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (ww :: Network.HTTP.Types.Method.Method)
                   (ww1 :: GHC.Types.Bool)
                   (ww2 :: Data.ByteString.Internal.ByteString)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: Data.ByteString.Internal.ByteString)
                   (ww5 :: Data.ByteString.Internal.ByteString)
                   (ww6 :: Network.HTTP.Types.Header.RequestHeaders)
                   (ww7 :: Network.HTTP.Client.Types.RequestBody)
                   (ww8 :: GHC.Base.Maybe Network.HTTP.Client.Types.Proxy)
                   (ww9 :: GHC.Base.Maybe Network.Socket.Types.HostAddress)
                   (ww10 :: GHC.Types.Bool)
                   (ww11 :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
                   (ww12 :: GHC.Types.Int)
                   (ww13 :: Network.HTTP.Client.Types.Request
                            -> Network.HTTP.Client.Types.Response
                                 Network.HTTP.Client.Types.BodyReader
                            -> GHC.Types.IO ())
                   (ww14 :: Network.HTTP.Client.Types.ResponseTimeout)
                   (ww15 :: GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar)
                   (ww16 :: Network.HTTP.Types.Version.HttpVersion)
                   (ww17 :: GHC.Exception.SomeException -> GHC.Types.IO ())
                   (ww18 :: GHC.Base.Maybe Network.HTTP.Client.Types.Manager) ->
                 Network.HTTP.Client.Types.Request
                   ww
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   (GHC.Types.:
                      @ (Network.HTTP.Types.Header.HeaderName,
                         Data.ByteString.Internal.ByteString)
                      (w, w1)
                      (GHC.List.filter
                         @ (Network.HTTP.Types.Header.HeaderName,
                            Data.ByteString.Internal.ByteString)
                         (\ (x :: (Network.HTTP.Types.Header.HeaderName,
                                   Data.ByteString.Internal.ByteString)) ->
                          case x of wild { (,) x1 ds1 ->
                          case x1 of wild1 { Data.CaseInsensitive.Internal.CI ds ds2 ->
                          case ds2 of wild2 { Data.ByteString.Internal.PS dt dt1 dt2 dt3 ->
                          case w of wild3 { Data.CaseInsensitive.Internal.CI ds3 ds4 ->
                          case ds4 of wild4 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim./=# dt3 dt7) of wild5 {
                            GHC.Types.False
                            -> case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.eqAddr# dt dt4) of wild6 {
                                 GHC.Types.False
                                 -> case Data.ByteString.Internal.$wcompareBytes
                                           dt
                                           dt1
                                           dt2
                                           dt3
                                           dt4
                                           dt5
                                           dt6
                                           dt7 of wild7 {
                                      DEFAULT -> GHC.Types.True GHC.Types.EQ -> GHC.Types.False }
                                 GHC.Types.True
                                 -> case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.==# dt2 dt6) of wild7 {
                                      GHC.Types.False
                                      -> case Data.ByteString.Internal.$wcompareBytes
                                                dt
                                                dt1
                                                dt2
                                                dt3
                                                dt4
                                                dt5
                                                dt6
                                                dt7 of wild8 {
                                           DEFAULT -> GHC.Types.True
                                           GHC.Types.EQ -> GHC.Types.False }
                                      GHC.Types.True -> GHC.Types.False } }
                            GHC.Types.True -> GHC.Types.True } } } } } })
                         ww6))
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17
                   ww18) -}
a7dee1f464597b0f9b9de759676bedb7
  assoc ::
    GHC.Classes.Eq k =>
    k -> Control.Lens.Type.IndexedTraversal' k [(k, a)] a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><L,U(A,C(C1(C1(U))))><L,U(U(U,U),C(U),C(C1(U)),A,A)><L,U>,
     Unfolding: (\ @ k
                   @ a
                   ($dEq :: GHC.Classes.Eq k)
                   (dk :: k)
                   @ (p :: * -> * -> *)
                   @ (f :: * -> *)
                   ($dIndexable :: Control.Lens.Internal.Indexed.Indexable k p)
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: p a (f a)) ->
                 let {
                   lvl :: GHC.Base.Functor f
                   = GHC.Base.$p1Applicative @ f $dApplicative
                 } in
                 let {
                   z :: f [(k, a)]
                   = GHC.Base.pure
                       @ f
                       $dApplicative
                       @ [(k, a)]
                       (GHC.Types.[] @ (k, a))
                 } in
                 letrec {
                   go :: [(k, a)] -> f [(k, a)] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(k, a)]) ->
                     case ds of wild {
                       [] -> z
                       : y ys
                       -> GHC.Base.<*>
                            @ f
                            $dApplicative
                            @ [(k, a)]
                            @ [(k, a)]
                            (GHC.Base.fmap
                               @ f
                               lvl
                               @ (k, a)
                               @ ([(k, a)] -> [(k, a)])
                               (GHC.Types.: @ (k, a))
                               (case y of wild1 { (,) k1 a1 ->
                                GHC.Base.fmap
                                  @ f
                                  lvl
                                  @ a
                                  @ (k, a)
                                  (GHC.Tuple.(,) @ k @ a k1)
                                  (case GHC.Classes.== @ k $dEq dk k1 of wild2 {
                                     GHC.Types.False -> GHC.Base.pure @ f $dApplicative @ a a1
                                     GHC.Types.True
                                     -> Control.Lens.Internal.Indexed.indexed
                                          @ k
                                          @ p
                                          $dIndexable
                                          @ a
                                          @ (f a)
                                          eta
                                          k1
                                          a1 }) }))
                            (go ys) }
                 } in
                 \ (eta1 :: [(k, a)]) -> go eta1) -}
38df4db31e857d00185d7b224fdc1801
  assoc2 ::
    GHC.Classes.Eq k => k -> Control.Lens.Type.Lens' [(k, a)] [a]
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><L,U(C(U),A)><L,C(U)>,
     Unfolding: (\ @ k
                   @ a
                   ($dEq :: GHC.Classes.Eq k)
                   (dk :: k)
                   @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: [a] -> f [a]) ->
                 let {
                   f2 :: f ([a], [(k, a)]) -> f [(k, a)]
                   = GHC.Base.fmap
                       @ f
                       $dFunctor
                       @ ([a], [(k, a)])
                       @ [(k, a)]
                       (\ (p :: ([a], [(k, a)])) ->
                        case p of wild { (,) x ds ->
                        letrec {
                          go :: [a] -> [(k, a)] {- Arity: 1, Strictness: <S,1*U> -}
                          = \ (ds1 :: [a]) ->
                            case ds1 of wild1 {
                              [] -> ds : y ys -> GHC.Types.: @ (k, a) (dk, y) (go ys) }
                        } in
                        go x })
                 } in
                 letrec {
                   $wgo :: [(k, a)] -> (# [(k, a)], [(k, a)] #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w :: [(k, a)]) ->
                     case w of wild {
                       [] -> (# GHC.Types.[] @ (k, a), GHC.Types.[] @ (k, a) #)
                       : y ys
                       -> let {
                            w2 :: ([(k, a)], [(k, a)])
                            = case $wgo ys of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                          } in
                          case GHC.Classes.==
                                 @ k
                                 $dEq
                                 (case y of wild1 { (,) x ds1 -> x })
                                 dk of wild1 {
                            GHC.Types.False
                            -> (# case w2 of wild2 { (,) ts fs -> ts },
                                  GHC.Types.: @ (k, a) y (case w2 of wild2 { (,) ts fs -> fs }) #)
                            GHC.Types.True
                            -> (# GHC.Types.:
                                    @ (k, a)
                                    y
                                    (case w2 of wild2 { (,) ts fs -> ts }),
                                  case w2 of wild2 { (,) ts fs -> fs } #) } }
                 } in
                 \ (x :: [(k, a)]) ->
                 f2
                   (let {
                      ds :: ([(k, a)], [(k, a)])
                      = case $wgo x of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                    } in
                    let {
                      b1 :: [(k, a)] = case ds of wild { (,) a1 b2 -> b2 }
                    } in
                    GHC.Base.fmap
                      @ f
                      $dFunctor
                      @ [a]
                      @ ([a], [(k, a)])
                      (\ (a'1 :: [a]) -> (a'1, b1))
                      (f1
                         (case ds of wild { (,) a1 b2 ->
                          GHC.Base.map @ (k, a) @ a (Data.Tuple.snd @ k @ a) a1 })))) -}
e968666ea4a24a5a96a56611bfc0cbe2
  checkResponse ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      (Network.HTTP.Client.Types.Request
       -> Network.HTTP.Client.Types.Response
            Network.HTTP.Client.Types.BodyReader
       -> GHC.Types.IO ())
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: (Network.HTTP.Client.Types.Request
                           -> Network.HTTP.Client.Types.Response
                                Network.HTTP.Client.Types.BodyReader
                           -> GHC.Types.IO ())
                          -> f (Network.HTTP.Client.Types.Request
                                -> Network.HTTP.Client.Types.Response
                                     Network.HTTP.Client.Types.BodyReader
                                -> GHC.Types.IO ()))
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (Network.HTTP.Client.Types.Request
                      -> Network.HTTP.Client.Types.Response
                           Network.HTTP.Client.Types.BodyReader
                      -> GHC.Types.IO ())
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Network.HTTP.Client.Types.Request
                             -> Network.HTTP.Client.Types.Response
                                  Network.HTTP.Client.Types.BodyReader
                             -> GHC.Types.IO ()) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      y1
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x14) }) -}
60e330cc37f84a270b01b9b29b4df153
  cookieJar ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      (GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar
                          -> f (GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar))
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar)
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Base.Maybe Network.HTTP.Client.Types.CookieJar) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      y1
                      x17
                      x18
                      x19)
                   (f1 x16) }) -}
690ae3859ebfac309397ebbf5b1d438a
  decompress ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
                          -> f (Data.ByteString.Internal.ByteString -> GHC.Types.Bool))
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (Data.ByteString.Internal.ByteString -> GHC.Types.Bool)
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Data.ByteString.Internal.ByteString -> GHC.Types.Bool) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      y1
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x12) }) -}
161e8e628dc84ff0b44485d876e58b95
  deleteKey :: GHC.Classes.Eq a => a -> [(a, b)] -> [(a, b)]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,C(C1(U)))><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   ($dEq :: GHC.Classes.Eq a)
                   (key :: a)
                   (eta :: [(a, b)]) ->
                 GHC.Base.build
                   @ (a, b)
                   (\ @ b1 (c :: (a, b) -> b1 -> b1)[OneShot] (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (a, b)
                      @ b1
                      (GHC.List.filterFB
                         @ (a, b)
                         @ b1
                         c
                         (\ (x :: (a, b)) ->
                          GHC.Classes./= @ a $dEq (case x of wild { (,) x1 ds1 -> x1 }) key))
                      n
                      eta)) -}
0fe9a27568220b59b0e4748d9c9121ad
  host ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Data.ByteString.Internal.ByteString
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Data.ByteString.Internal.ByteString
                          -> f Data.ByteString.Internal.ByteString)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Data.ByteString.Internal.ByteString
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Data.ByteString.Internal.ByteString) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      y1
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x3) }) -}
8dbd5605be8ffcc4eb875befcb2a3173
  hostAddress ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      (GHC.Base.Maybe Network.Socket.Types.HostAddress)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.Maybe Network.Socket.Types.HostAddress
                          -> f (GHC.Base.Maybe Network.Socket.Types.HostAddress))
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Network.Socket.Types.HostAddress)
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Base.Maybe Network.Socket.Types.HostAddress) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      y1
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x10) }) -}
5e2c89a791aeba78ad3fbe6f71c986ee
  maybeSetHeader ::
    Network.HTTP.Types.Header.HeaderName
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Client.Types.Request
    -> Network.HTTP.Client.Types.Request
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,U><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ (name :: Network.HTTP.Types.Header.HeaderName)
                   (value :: Data.ByteString.Internal.ByteString)
                   (eta :: Network.HTTP.Client.Types.Request) ->
                 case eta of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 Network.HTTP.Client.Types.Request
                   x1
                   x2
                   x3
                   x4
                   x5
                   x6
                   (case GHC.List.lookup
                           @ Network.HTTP.Types.Header.HeaderName
                           @ Data.ByteString.Internal.ByteString
                           Network.HTTP.Client.Request.$s$fEq(,)_$s$fEqCI
                           name
                           x7 of wild1 {
                      GHC.Base.Nothing
                      -> GHC.Types.:
                           @ (Network.HTTP.Types.Header.HeaderName,
                              Data.ByteString.Internal.ByteString)
                           (name, value)
                           x7
                      GHC.Base.Just ds -> x7 })
                   x8
                   x9
                   x10
                   x11
                   x12
                   x13
                   x14
                   x15
                   x16
                   x17
                   x18
                   x19 }) -}
c9e3c345db43b19086e4a8b02f781c64
  method ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request Network.HTTP.Types.Method.Method
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Network.HTTP.Types.Method.Method
                          -> f Network.HTTP.Types.Method.Method)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Network.HTTP.Types.Method.Method
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Network.HTTP.Types.Method.Method) ->
                    Network.HTTP.Client.Types.Request
                      y1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x1) }) -}
cff2153563d6f377791e5b6b5da61c67
  onRequestBodyException ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      (GHC.Exception.SomeException -> GHC.Types.IO ())
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: (GHC.Exception.SomeException -> GHC.Types.IO ())
                          -> f (GHC.Exception.SomeException -> GHC.Types.IO ()))
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Exception.SomeException -> GHC.Types.IO ())
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Exception.SomeException -> GHC.Types.IO ()) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      y1
                      x19)
                   (f1 x18) }) -}
47b2dc979d5efe857377331f05804470
  path ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Data.ByteString.Internal.ByteString
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Data.ByteString.Internal.ByteString
                          -> f Data.ByteString.Internal.ByteString)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Data.ByteString.Internal.ByteString
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Data.ByteString.Internal.ByteString) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      y1
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x5) }) -}
0bfb558b57af50cce642f9188f85d80a
  port ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Int -> f GHC.Types.Int)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Int
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Types.Int) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      y1
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x4) }) -}
fee74a170c6eaa3000ddbff913dd0683
  proxy ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      (GHC.Base.Maybe Network.HTTP.Client.Types.Proxy)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.Maybe Network.HTTP.Client.Types.Proxy
                          -> f (GHC.Base.Maybe Network.HTTP.Client.Types.Proxy))
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe Network.HTTP.Client.Types.Proxy)
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Base.Maybe Network.HTTP.Client.Types.Proxy) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      y1
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x9) }) -}
51873fff5a6b81b06fa807745f6e8a63
  queryString ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Data.ByteString.Internal.ByteString
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Data.ByteString.Internal.ByteString
                          -> f Data.ByteString.Internal.ByteString)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Data.ByteString.Internal.ByteString
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Data.ByteString.Internal.ByteString) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      y1
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x6) }) -}
57650925cb8024caceb910f4e3436a3b
  rawBody ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Bool -> f GHC.Types.Bool)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Bool
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Types.Bool) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      y1
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x11) }) -}
7906f0e49a95ccde7f984be431f0d75c
  redirectCount ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Int -> f GHC.Types.Int)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Int
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Types.Int) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      y1
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x13) }) -}
62f2612db76f309776d65d087fb865bd
  requestBody ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Network.HTTP.Client.Types.RequestBody
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Network.HTTP.Client.Types.RequestBody
                          -> f Network.HTTP.Client.Types.RequestBody)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Network.HTTP.Client.Types.RequestBody
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Network.HTTP.Client.Types.RequestBody) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      y1
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x8) }) -}
573fb8868a47baf7930db6c73683088e
  requestHeaders ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Network.HTTP.Types.Header.RequestHeaders
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Network.HTTP.Types.Header.RequestHeaders
                          -> f Network.HTTP.Types.Header.RequestHeaders)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Network.HTTP.Types.Header.RequestHeaders
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Network.HTTP.Types.Header.RequestHeaders) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      y1
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x7) }) -}
1d1fd7035ee27bf21d0475f3025bf179
  requestVersion ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Network.HTTP.Types.Version.HttpVersion
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Network.HTTP.Types.Version.HttpVersion
                          -> f Network.HTTP.Types.Version.HttpVersion)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Network.HTTP.Types.Version.HttpVersion
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Network.HTTP.Types.Version.HttpVersion) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      y1
                      x18
                      x19)
                   (f1 x17) }) -}
2d0c11dd3602b910ec403855b8f53109
  responseTimeout ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request
      Network.HTTP.Client.Types.ResponseTimeout
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Network.HTTP.Client.Types.ResponseTimeout
                          -> f Network.HTTP.Client.Types.ResponseTimeout)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Network.HTTP.Client.Types.ResponseTimeout
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: Network.HTTP.Client.Types.ResponseTimeout) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      x2
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      y1
                      x16
                      x17
                      x18
                      x19)
                   (f1 x15) }) -}
7d484cde6bb54e503c9cc91bfecc7e12
  secure ::
    Control.Lens.Type.Lens'
      Network.HTTP.Client.Types.Request GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Types.Bool -> f GHC.Types.Bool)
                   (ds :: Network.HTTP.Client.Types.Request) ->
                 case ds of wild { Network.HTTP.Client.Types.Request x1 x2 x3 x4 x5 x6 x7 x8 x9 x10 x11 x12 x13 x14 x15 x16 x17 x18 x19 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Types.Bool
                   @ Network.HTTP.Client.Types.Request
                   (\ (y1 :: GHC.Types.Bool) ->
                    Network.HTTP.Client.Types.Request
                      x1
                      y1
                      x3
                      x4
                      x5
                      x6
                      x7
                      x8
                      x9
                      x10
                      x11
                      x12
                      x13
                      x14
                      x15
                      x16
                      x17
                      x18
                      x19)
                   (f1 x2) }) -}
878b297e824d0fd865b2d2e0b6feeacf
  seshCookies ::
    Control.Lens.Type.Lens'
      Network.Wreq.Internal.Types.Session
      (GHC.Base.Maybe
         (GHC.IORef.IORef Network.HTTP.Client.Types.CookieJar))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.Maybe
                            (GHC.IORef.IORef Network.HTTP.Client.Types.CookieJar)
                          -> f (GHC.Base.Maybe
                                  (GHC.IORef.IORef Network.HTTP.Client.Types.CookieJar)))
                   (ds :: Network.Wreq.Internal.Types.Session) ->
                 case ds of wild { Network.Wreq.Internal.Types.Session x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (GHC.Base.Maybe
                        (GHC.IORef.IORef Network.HTTP.Client.Types.CookieJar))
                   @ Network.Wreq.Internal.Types.Session
                   (\ (y1 :: GHC.Base.Maybe
                               (GHC.IORef.IORef Network.HTTP.Client.Types.CookieJar)) ->
                    Network.Wreq.Internal.Types.Session y1 x2 x3)
                   (f1 x1) }) -}
6e4299624d5624cb305204777876e0dd
  seshManager ::
    Control.Lens.Type.Lens'
      Network.Wreq.Internal.Types.Session
      Network.HTTP.Client.Types.Manager
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: Network.HTTP.Client.Types.Manager
                          -> f Network.HTTP.Client.Types.Manager)
                   (ds :: Network.Wreq.Internal.Types.Session) ->
                 case ds of wild { Network.Wreq.Internal.Types.Session x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Network.HTTP.Client.Types.Manager
                   @ Network.Wreq.Internal.Types.Session
                   (\ (y1 :: Network.HTTP.Client.Types.Manager) ->
                    Network.Wreq.Internal.Types.Session x1 y1 x3)
                   (f1 x2) }) -}
ce6c743adb69db6639fd106a072b3601
  seshRun ::
    Control.Lens.Type.Lens'
      Network.Wreq.Internal.Types.Session
      (Network.Wreq.Internal.Types.Session
       -> Network.Wreq.Internal.Types.Run Network.Wreq.Internal.Types.Body
       -> Network.Wreq.Internal.Types.Run
            Network.Wreq.Internal.Types.Body)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: (Network.Wreq.Internal.Types.Session
                           -> Network.Wreq.Internal.Types.Run Network.Wreq.Internal.Types.Body
                           -> Network.Wreq.Internal.Types.Run
                                Network.Wreq.Internal.Types.Body)
                          -> f (Network.Wreq.Internal.Types.Session
                                -> Network.Wreq.Internal.Types.Run Network.Wreq.Internal.Types.Body
                                -> Network.Wreq.Internal.Types.Run
                                     Network.Wreq.Internal.Types.Body))
                   (ds :: Network.Wreq.Internal.Types.Session) ->
                 case ds of wild { Network.Wreq.Internal.Types.Session x1 x2 x3 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ (Network.Wreq.Internal.Types.Session
                      -> Network.Wreq.Internal.Types.Run Network.Wreq.Internal.Types.Body
                      -> Network.Wreq.Internal.Types.Run
                           Network.Wreq.Internal.Types.Body)
                   @ Network.Wreq.Internal.Types.Session
                   (\ (y1 :: Network.Wreq.Internal.Types.Session
                             -> Network.Wreq.Internal.Types.Run Network.Wreq.Internal.Types.Body
                             -> Network.Wreq.Internal.Types.Run
                                  Network.Wreq.Internal.Types.Body) ->
                    Network.Wreq.Internal.Types.Session x1 x2 y1)
                   (f1 x3) }) -}
daca0bf19942aa7d064747b592e30cec
  setHeader ::
    Network.HTTP.Types.Header.HeaderName
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Client.Types.Request
    -> Network.HTTP.Client.Types.Request
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,U(U,U,U,U))><L,U><S,1*U(U,U,U,U,U,U,1*U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Network.Wreq.Internal.Lens.setHeader1
                  `cast`
                (<Network.HTTP.Types.Header.HeaderName>_R
                 ->_R <Data.ByteString.Internal.ByteString>_R
                 ->_R <Network.HTTP.Client.Types.Request>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Network.HTTP.Client.Types.Request>_R) -}
d6bd5b5bdfcc21de59fcde7953d384fe
  setHeader1 ::
    Network.HTTP.Types.Header.HeaderName
    -> Data.ByteString.Internal.ByteString
    -> Network.HTTP.Client.Types.Request
    -> Data.Functor.Identity.Identity Network.HTTP.Client.Types.Request
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(U,U(U,U,U,U))><L,U><S,1*U(U,U,U,U,U,U,1*U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Network.HTTP.Types.Header.HeaderName)
                   (w1 :: Data.ByteString.Internal.ByteString)
                   (w2 :: Network.HTTP.Client.Types.Request) ->
                 case w2 of ww { Network.HTTP.Client.Types.Request ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ->
                 (Network.Wreq.Internal.Lens.$wsetHeader
                    w
                    w1
                    ww1
                    ww2
                    ww3
                    ww4
                    ww5
                    ww6
                    ww7
                    ww8
                    ww9
                    ww10
                    ww11
                    ww12
                    ww13
                    ww14
                    ww15
                    ww16
                    ww17
                    ww18
                    ww19)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Network.HTTP.Client.Types.Request>_R)) }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

